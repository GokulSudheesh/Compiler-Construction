State 16 conflicts: 4 shift/reduce
State 29 conflicts: 7 shift/reduce
State 93 conflicts: 2 shift/reduce
State 108 conflicts: 2 reduce/reduce


Grammar

    0 $accept: prm $end

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB BODY RCB

    2 BODY: DECLARATION_STATEMENTS BODY2

    3 BODY2: %empty
    4      | DECLARATION_STATEMENTS BODY2
    5      | PROGRAM_STATEMENTS BODY2

    6 DECLARATION_STATEMENTS: DECLARATION_STATEMENT DECLARATION_STATEMENTS
    7                       | DECLARATION_STATEMENT

    8 DECLARATION_STATEMENT: DATA_TYPE VAR_LIST SC

    9 VAR_LIST: VAR COMA VAR_LIST
   10         | VAR

   11 MAIN_TYPE: INT

   12 DATA_TYPE: INT
   13          | CHAR
   14          | FLOAT
   15          | DOUBLE

   16 PROGRAM_STATEMENTS: PROGRAM_STATEMENT PROGRAM_STATEMENTS
   17                   | LB LOGICAL_EXPN RB QMARK LCB BODY2 RCB COLON LCB BODY2 RCB
   18                   | IF LB LOGICAL_EXPN RB LCB BODY2 RCB
   19                   | IF LB LOGICAL_EXPN RB LCB BODY2 RCB ELSE LCB BODY2 RCB
   20                   | WHILE LB LOGICAL_EXPN RB LCB BODY2 RCB
   21                   | DO LCB BODY2 RCB WHILE LB LOGICAL_EXPN RB SC
   22                   | FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB
   23                   | PROGRAM_STATEMENT

   24 LOGICAL_EXPN: NOT LB LOGICAL_EXPN1 RB
   25             | LOGICAL_EXPN1

   26 LOGICAL_EXPN1: LOGICAL_EXPN1 LOGICAL_OPERATOR LOGICAL_EXPN1
   27              | LOGICAL_EXPN2
   28              | NOT LB LOGICAL_EXPN1 RB
   29              | LB LOGICAL_EXPN1 RB

   30 LOGICAL_EXPN2: A_EXPN COMP_OPERATOR A_EXPN

   31 COMP_OPERATOR: ET
   32              | GT
   33              | LT
   34              | GTE
   35              | LTE
   36              | NE

   37 LOGICAL_OPERATOR: AND
   38                 | OR

   39 PROGRAM_STATEMENT: VAR EQ A_EXPN SC
   40                  | SC
   41                  | VAR UPLUS SC
   42                  | VAR UMINUS SC

   43 A_EXPN: A_EXPN PLUS A_EXPN
   44       | A_EXPN MINUS A_EXPN
   45       | A_EXPN1

   46 A_EXPN1: A_EXPN1 MUL A_EXPN1
   47        | A_EXPN1 DIV A_EXPN1
   48        | A_EXPN1 MOD A_EXPN1
   49        | A_EXPN2

   50 A_EXPN2: A_EXPN2 EXP A_EXPN2
   51        | A_EXPN3

   52 A_EXPN3: LB A_EXPN RB
   53        | NUMBER
   54        | VAR UPLUS
   55        | VAR UMINUS
   56        | VAR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    HEADER (258) 1
    MAIN (259) 1
    LB (260) 1 17 18 19 20 21 22 24 28 29 52
    RB (261) 1 17 18 19 20 21 22 24 28 29 52
    LCB (262) 1 17 18 19 20 21 22
    RCB (263) 1 17 18 19 20 21 22
    SC (264) 8 21 22 39 40 41 42
    COLON (265) 17
    QMARK (266) 17
    COMA (267) 9
    IF (268) 18 19
    ELSE (269) 19
    FOR (270) 22
    DO (271) 21
    WHILE (272) 20 21
    VAR <var_name> (273) 9 10 22 39 41 42 54 55 56
    NUMBER (274) 53
    ET (275) 31
    EQ (276) 22 39
    GT (277) 32
    LT (278) 33
    GTE (279) 34
    LTE (280) 35
    NE (281) 36
    AND (282) 37
    OR (283) 38
    NOT (284) 24 28
    PLUS (285) 43
    MINUS (286) 44
    MUL (287) 46
    DIV (288) 47
    MOD (289) 48
    EXP (290) 50
    UPLUS (291) 41 54
    UMINUS (292) 42 55
    INT <data_type> (293) 11 12
    CHAR <data_type> (294) 13
    FLOAT <data_type> (295) 14
    DOUBLE <data_type> (296) 15


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    prm (43)
        on left: 1
        on right: 0
    BODY (44)
        on left: 2
        on right: 1
    BODY2 (45)
        on left: 3 4 5
        on right: 2 4 5 17 18 19 20 21 22
    DECLARATION_STATEMENTS (46)
        on left: 6 7
        on right: 2 4 6
    DECLARATION_STATEMENT (47)
        on left: 8
        on right: 6 7
    VAR_LIST (48)
        on left: 9 10
        on right: 8 9
    MAIN_TYPE (49)
        on left: 11
        on right: 1
    DATA_TYPE <data_type> (50)
        on left: 12 13 14 15
        on right: 8
    PROGRAM_STATEMENTS (51)
        on left: 16 17 18 19 20 21 22 23
        on right: 5 16
    LOGICAL_EXPN (52)
        on left: 24 25
        on right: 17 18 19 20 21 22
    LOGICAL_EXPN1 (53)
        on left: 26 27 28 29
        on right: 24 25 26 28 29
    LOGICAL_EXPN2 (54)
        on left: 30
        on right: 27
    COMP_OPERATOR (55)
        on left: 31 32 33 34 35 36
        on right: 30
    LOGICAL_OPERATOR (56)
        on left: 37 38
        on right: 26
    PROGRAM_STATEMENT (57)
        on left: 39 40 41 42
        on right: 16 23
    A_EXPN (58)
        on left: 43 44 45
        on right: 22 30 39 43 44 52
    A_EXPN1 (59)
        on left: 46 47 48 49
        on right: 45 46 47 48
    A_EXPN2 (60)
        on left: 50 51
        on right: 49 50
    A_EXPN3 (61)
        on left: 52 53 54 55 56
        on right: 51


State 0

    0 $accept: . prm $end

    HEADER  shift, and go to state 1

    prm  go to state 2


State 1

    1 prm: HEADER . MAIN_TYPE MAIN LB RB LCB BODY RCB

    INT  shift, and go to state 3

    MAIN_TYPE  go to state 4


State 2

    0 $accept: prm . $end

    $end  shift, and go to state 5


State 3

   11 MAIN_TYPE: INT .

    $default  reduce using rule 11 (MAIN_TYPE)


State 4

    1 prm: HEADER MAIN_TYPE . MAIN LB RB LCB BODY RCB

    MAIN  shift, and go to state 6


State 5

    0 $accept: prm $end .

    $default  accept


State 6

    1 prm: HEADER MAIN_TYPE MAIN . LB RB LCB BODY RCB

    LB  shift, and go to state 7


State 7

    1 prm: HEADER MAIN_TYPE MAIN LB . RB LCB BODY RCB

    RB  shift, and go to state 8


State 8

    1 prm: HEADER MAIN_TYPE MAIN LB RB . LCB BODY RCB

    LCB  shift, and go to state 9


State 9

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB . BODY RCB

    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    BODY                    go to state 14
    DECLARATION_STATEMENTS  go to state 15
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17


State 10

   12 DATA_TYPE: INT .

    $default  reduce using rule 12 (DATA_TYPE)


State 11

   13 DATA_TYPE: CHAR .

    $default  reduce using rule 13 (DATA_TYPE)


State 12

   14 DATA_TYPE: FLOAT .

    $default  reduce using rule 14 (DATA_TYPE)


State 13

   15 DATA_TYPE: DOUBLE .

    $default  reduce using rule 15 (DATA_TYPE)


State 14

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB BODY . RCB

    RCB  shift, and go to state 18


State 15

    2 BODY: DECLARATION_STATEMENTS . BODY2

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 26
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 16

    6 DECLARATION_STATEMENTS: DECLARATION_STATEMENT . DECLARATION_STATEMENTS
    7                       | DECLARATION_STATEMENT .

    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    INT       [reduce using rule 7 (DECLARATION_STATEMENTS)]
    CHAR      [reduce using rule 7 (DECLARATION_STATEMENTS)]
    FLOAT     [reduce using rule 7 (DECLARATION_STATEMENTS)]
    DOUBLE    [reduce using rule 7 (DECLARATION_STATEMENTS)]
    $default  reduce using rule 7 (DECLARATION_STATEMENTS)

    DECLARATION_STATEMENTS  go to state 30
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17


State 17

    8 DECLARATION_STATEMENT: DATA_TYPE . VAR_LIST SC

    VAR  shift, and go to state 31

    VAR_LIST  go to state 32


State 18

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB BODY RCB .

    $default  reduce using rule 1 (prm)


State 19

   17 PROGRAM_STATEMENTS: LB . LOGICAL_EXPN RB QMARK LCB BODY2 RCB COLON LCB BODY2 RCB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 36

    LOGICAL_EXPN   go to state 37
    LOGICAL_EXPN1  go to state 38
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 20

   40 PROGRAM_STATEMENT: SC .

    $default  reduce using rule 40 (PROGRAM_STATEMENT)


State 21

   18 PROGRAM_STATEMENTS: IF . LB LOGICAL_EXPN RB LCB BODY2 RCB
   19                   | IF . LB LOGICAL_EXPN RB LCB BODY2 RCB ELSE LCB BODY2 RCB

    LB  shift, and go to state 44


State 22

   22 PROGRAM_STATEMENTS: FOR . LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB

    LB  shift, and go to state 45


State 23

   21 PROGRAM_STATEMENTS: DO . LCB BODY2 RCB WHILE LB LOGICAL_EXPN RB SC

    LCB  shift, and go to state 46


State 24

   20 PROGRAM_STATEMENTS: WHILE . LB LOGICAL_EXPN RB LCB BODY2 RCB

    LB  shift, and go to state 47


State 25

   39 PROGRAM_STATEMENT: VAR . EQ A_EXPN SC
   41                  | VAR . UPLUS SC
   42                  | VAR . UMINUS SC

    EQ      shift, and go to state 48
    UPLUS   shift, and go to state 49
    UMINUS  shift, and go to state 50


State 26

    2 BODY: DECLARATION_STATEMENTS BODY2 .

    $default  reduce using rule 2 (BODY)


State 27

    4 BODY2: DECLARATION_STATEMENTS . BODY2

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 51
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 28

    5 BODY2: PROGRAM_STATEMENTS . BODY2

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 52
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 29

   16 PROGRAM_STATEMENTS: PROGRAM_STATEMENT . PROGRAM_STATEMENTS
   23                   | PROGRAM_STATEMENT .

    LB     shift, and go to state 19
    SC     shift, and go to state 20
    IF     shift, and go to state 21
    FOR    shift, and go to state 22
    DO     shift, and go to state 23
    WHILE  shift, and go to state 24
    VAR    shift, and go to state 25

    LB        [reduce using rule 23 (PROGRAM_STATEMENTS)]
    SC        [reduce using rule 23 (PROGRAM_STATEMENTS)]
    IF        [reduce using rule 23 (PROGRAM_STATEMENTS)]
    FOR       [reduce using rule 23 (PROGRAM_STATEMENTS)]
    DO        [reduce using rule 23 (PROGRAM_STATEMENTS)]
    WHILE     [reduce using rule 23 (PROGRAM_STATEMENTS)]
    VAR       [reduce using rule 23 (PROGRAM_STATEMENTS)]
    $default  reduce using rule 23 (PROGRAM_STATEMENTS)

    PROGRAM_STATEMENTS  go to state 53
    PROGRAM_STATEMENT   go to state 29


State 30

    6 DECLARATION_STATEMENTS: DECLARATION_STATEMENT DECLARATION_STATEMENTS .

    $default  reduce using rule 6 (DECLARATION_STATEMENTS)


State 31

    9 VAR_LIST: VAR . COMA VAR_LIST
   10         | VAR .

    COMA  shift, and go to state 54

    $default  reduce using rule 10 (VAR_LIST)


State 32

    8 DECLARATION_STATEMENT: DATA_TYPE VAR_LIST . SC

    SC  shift, and go to state 55


State 33

   29 LOGICAL_EXPN1: LB . LOGICAL_EXPN1 RB
   52 A_EXPN3: LB . A_EXPN RB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 56

    LOGICAL_EXPN1  go to state 57
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 58
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 34

   54 A_EXPN3: VAR . UPLUS
   55        | VAR . UMINUS
   56        | VAR .

    UPLUS   shift, and go to state 59
    UMINUS  shift, and go to state 60

    $default  reduce using rule 56 (A_EXPN3)


State 35

   53 A_EXPN3: NUMBER .

    $default  reduce using rule 53 (A_EXPN3)


State 36

   24 LOGICAL_EXPN: NOT . LB LOGICAL_EXPN1 RB
   28 LOGICAL_EXPN1: NOT . LB LOGICAL_EXPN1 RB

    LB  shift, and go to state 61


State 37

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN . RB QMARK LCB BODY2 RCB COLON LCB BODY2 RCB

    RB  shift, and go to state 62


State 38

   25 LOGICAL_EXPN: LOGICAL_EXPN1 .
   26 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1

    AND  shift, and go to state 63
    OR   shift, and go to state 64

    $default  reduce using rule 25 (LOGICAL_EXPN)

    LOGICAL_OPERATOR  go to state 65


State 39

   27 LOGICAL_EXPN1: LOGICAL_EXPN2 .

    $default  reduce using rule 27 (LOGICAL_EXPN1)


State 40

   30 LOGICAL_EXPN2: A_EXPN . COMP_OPERATOR A_EXPN
   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN

    ET     shift, and go to state 66
    GT     shift, and go to state 67
    LT     shift, and go to state 68
    GTE    shift, and go to state 69
    LTE    shift, and go to state 70
    NE     shift, and go to state 71
    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73

    COMP_OPERATOR  go to state 74


State 41

   45 A_EXPN: A_EXPN1 .
   46 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   47        | A_EXPN1 . DIV A_EXPN1
   48        | A_EXPN1 . MOD A_EXPN1

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76
    MOD  shift, and go to state 77

    $default  reduce using rule 45 (A_EXPN)


State 42

   49 A_EXPN1: A_EXPN2 .
   50 A_EXPN2: A_EXPN2 . EXP A_EXPN2

    EXP  shift, and go to state 78

    $default  reduce using rule 49 (A_EXPN1)


State 43

   51 A_EXPN2: A_EXPN3 .

    $default  reduce using rule 51 (A_EXPN2)


State 44

   18 PROGRAM_STATEMENTS: IF LB . LOGICAL_EXPN RB LCB BODY2 RCB
   19                   | IF LB . LOGICAL_EXPN RB LCB BODY2 RCB ELSE LCB BODY2 RCB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 36

    LOGICAL_EXPN   go to state 79
    LOGICAL_EXPN1  go to state 38
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 45

   22 PROGRAM_STATEMENTS: FOR LB . VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB

    VAR  shift, and go to state 80


State 46

   21 PROGRAM_STATEMENTS: DO LCB . BODY2 RCB WHILE LB LOGICAL_EXPN RB SC

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 81
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 47

   20 PROGRAM_STATEMENTS: WHILE LB . LOGICAL_EXPN RB LCB BODY2 RCB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 36

    LOGICAL_EXPN   go to state 82
    LOGICAL_EXPN1  go to state 38
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 48

   39 PROGRAM_STATEMENT: VAR EQ . A_EXPN SC

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 84
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 49

   41 PROGRAM_STATEMENT: VAR UPLUS . SC

    SC  shift, and go to state 85


State 50

   42 PROGRAM_STATEMENT: VAR UMINUS . SC

    SC  shift, and go to state 86


State 51

    4 BODY2: DECLARATION_STATEMENTS BODY2 .

    $default  reduce using rule 4 (BODY2)


State 52

    5 BODY2: PROGRAM_STATEMENTS BODY2 .

    $default  reduce using rule 5 (BODY2)


State 53

   16 PROGRAM_STATEMENTS: PROGRAM_STATEMENT PROGRAM_STATEMENTS .

    $default  reduce using rule 16 (PROGRAM_STATEMENTS)


State 54

    9 VAR_LIST: VAR COMA . VAR_LIST

    VAR  shift, and go to state 31

    VAR_LIST  go to state 87


State 55

    8 DECLARATION_STATEMENT: DATA_TYPE VAR_LIST SC .

    $default  reduce using rule 8 (DECLARATION_STATEMENT)


State 56

   28 LOGICAL_EXPN1: NOT . LB LOGICAL_EXPN1 RB

    LB  shift, and go to state 88


State 57

   26 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   29              | LB LOGICAL_EXPN1 . RB

    RB   shift, and go to state 89
    AND  shift, and go to state 63
    OR   shift, and go to state 64

    LOGICAL_OPERATOR  go to state 65


State 58

   30 LOGICAL_EXPN2: A_EXPN . COMP_OPERATOR A_EXPN
   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN
   52 A_EXPN3: LB A_EXPN . RB

    RB     shift, and go to state 90
    ET     shift, and go to state 66
    GT     shift, and go to state 67
    LT     shift, and go to state 68
    GTE    shift, and go to state 69
    LTE    shift, and go to state 70
    NE     shift, and go to state 71
    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73

    COMP_OPERATOR  go to state 74


State 59

   54 A_EXPN3: VAR UPLUS .

    $default  reduce using rule 54 (A_EXPN3)


State 60

   55 A_EXPN3: VAR UMINUS .

    $default  reduce using rule 55 (A_EXPN3)


State 61

   24 LOGICAL_EXPN: NOT LB . LOGICAL_EXPN1 RB
   28 LOGICAL_EXPN1: NOT LB . LOGICAL_EXPN1 RB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 56

    LOGICAL_EXPN1  go to state 91
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 62

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB . QMARK LCB BODY2 RCB COLON LCB BODY2 RCB

    QMARK  shift, and go to state 92


State 63

   37 LOGICAL_OPERATOR: AND .

    $default  reduce using rule 37 (LOGICAL_OPERATOR)


State 64

   38 LOGICAL_OPERATOR: OR .

    $default  reduce using rule 38 (LOGICAL_OPERATOR)


State 65

   26 LOGICAL_EXPN1: LOGICAL_EXPN1 LOGICAL_OPERATOR . LOGICAL_EXPN1

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 56

    LOGICAL_EXPN1  go to state 93
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 66

   31 COMP_OPERATOR: ET .

    $default  reduce using rule 31 (COMP_OPERATOR)


State 67

   32 COMP_OPERATOR: GT .

    $default  reduce using rule 32 (COMP_OPERATOR)


State 68

   33 COMP_OPERATOR: LT .

    $default  reduce using rule 33 (COMP_OPERATOR)


State 69

   34 COMP_OPERATOR: GTE .

    $default  reduce using rule 34 (COMP_OPERATOR)


State 70

   35 COMP_OPERATOR: LTE .

    $default  reduce using rule 35 (COMP_OPERATOR)


State 71

   36 COMP_OPERATOR: NE .

    $default  reduce using rule 36 (COMP_OPERATOR)


State 72

   43 A_EXPN: A_EXPN PLUS . A_EXPN

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 94
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 73

   44 A_EXPN: A_EXPN MINUS . A_EXPN

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 95
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 74

   30 LOGICAL_EXPN2: A_EXPN COMP_OPERATOR . A_EXPN

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 96
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 75

   46 A_EXPN1: A_EXPN1 MUL . A_EXPN1

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN1  go to state 97
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 76

   47 A_EXPN1: A_EXPN1 DIV . A_EXPN1

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN1  go to state 98
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 77

   48 A_EXPN1: A_EXPN1 MOD . A_EXPN1

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN1  go to state 99
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 78

   50 A_EXPN2: A_EXPN2 EXP . A_EXPN2

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN2  go to state 100
    A_EXPN3  go to state 43


State 79

   18 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN . RB LCB BODY2 RCB
   19                   | IF LB LOGICAL_EXPN . RB LCB BODY2 RCB ELSE LCB BODY2 RCB

    RB  shift, and go to state 101


State 80

   22 PROGRAM_STATEMENTS: FOR LB VAR . EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB

    EQ  shift, and go to state 102


State 81

   21 PROGRAM_STATEMENTS: DO LCB BODY2 . RCB WHILE LB LOGICAL_EXPN RB SC

    RCB  shift, and go to state 103


State 82

   20 PROGRAM_STATEMENTS: WHILE LB LOGICAL_EXPN . RB LCB BODY2 RCB

    RB  shift, and go to state 104


State 83

   52 A_EXPN3: LB . A_EXPN RB

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 105
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 84

   39 PROGRAM_STATEMENT: VAR EQ A_EXPN . SC
   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN

    SC     shift, and go to state 106
    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73


State 85

   41 PROGRAM_STATEMENT: VAR UPLUS SC .

    $default  reduce using rule 41 (PROGRAM_STATEMENT)


State 86

   42 PROGRAM_STATEMENT: VAR UMINUS SC .

    $default  reduce using rule 42 (PROGRAM_STATEMENT)


State 87

    9 VAR_LIST: VAR COMA VAR_LIST .

    $default  reduce using rule 9 (VAR_LIST)


State 88

   28 LOGICAL_EXPN1: NOT LB . LOGICAL_EXPN1 RB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 56

    LOGICAL_EXPN1  go to state 107
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 89

   29 LOGICAL_EXPN1: LB LOGICAL_EXPN1 RB .

    $default  reduce using rule 29 (LOGICAL_EXPN1)


State 90

   52 A_EXPN3: LB A_EXPN RB .

    $default  reduce using rule 52 (A_EXPN3)


State 91

   24 LOGICAL_EXPN: NOT LB LOGICAL_EXPN1 . RB
   26 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   28              | NOT LB LOGICAL_EXPN1 . RB

    RB   shift, and go to state 108
    AND  shift, and go to state 63
    OR   shift, and go to state 64

    LOGICAL_OPERATOR  go to state 65


State 92

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK . LCB BODY2 RCB COLON LCB BODY2 RCB

    LCB  shift, and go to state 109


State 93

   26 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   26              | LOGICAL_EXPN1 LOGICAL_OPERATOR LOGICAL_EXPN1 .

    AND  shift, and go to state 63
    OR   shift, and go to state 64

    AND       [reduce using rule 26 (LOGICAL_EXPN1)]
    OR        [reduce using rule 26 (LOGICAL_EXPN1)]
    $default  reduce using rule 26 (LOGICAL_EXPN1)

    LOGICAL_OPERATOR  go to state 65


State 94

   43 A_EXPN: A_EXPN . PLUS A_EXPN
   43       | A_EXPN PLUS A_EXPN .
   44       | A_EXPN . MINUS A_EXPN

    $default  reduce using rule 43 (A_EXPN)


State 95

   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN
   44       | A_EXPN MINUS A_EXPN .

    $default  reduce using rule 44 (A_EXPN)


State 96

   30 LOGICAL_EXPN2: A_EXPN COMP_OPERATOR A_EXPN .
   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73

    $default  reduce using rule 30 (LOGICAL_EXPN2)


State 97

   46 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   46        | A_EXPN1 MUL A_EXPN1 .
   47        | A_EXPN1 . DIV A_EXPN1
   48        | A_EXPN1 . MOD A_EXPN1

    $default  reduce using rule 46 (A_EXPN1)


State 98

   46 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   47        | A_EXPN1 . DIV A_EXPN1
   47        | A_EXPN1 DIV A_EXPN1 .
   48        | A_EXPN1 . MOD A_EXPN1

    $default  reduce using rule 47 (A_EXPN1)


State 99

   46 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   47        | A_EXPN1 . DIV A_EXPN1
   48        | A_EXPN1 . MOD A_EXPN1
   48        | A_EXPN1 MOD A_EXPN1 .

    $default  reduce using rule 48 (A_EXPN1)


State 100

   50 A_EXPN2: A_EXPN2 . EXP A_EXPN2
   50        | A_EXPN2 EXP A_EXPN2 .

    EXP  shift, and go to state 78

    $default  reduce using rule 50 (A_EXPN2)


State 101

   18 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB . LCB BODY2 RCB
   19                   | IF LB LOGICAL_EXPN RB . LCB BODY2 RCB ELSE LCB BODY2 RCB

    LCB  shift, and go to state 110


State 102

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ . A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 111
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 103

   21 PROGRAM_STATEMENTS: DO LCB BODY2 RCB . WHILE LB LOGICAL_EXPN RB SC

    WHILE  shift, and go to state 112


State 104

   20 PROGRAM_STATEMENTS: WHILE LB LOGICAL_EXPN RB . LCB BODY2 RCB

    LCB  shift, and go to state 113


State 105

   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN
   52 A_EXPN3: LB A_EXPN . RB

    RB     shift, and go to state 90
    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73


State 106

   39 PROGRAM_STATEMENT: VAR EQ A_EXPN SC .

    $default  reduce using rule 39 (PROGRAM_STATEMENT)


State 107

   26 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   28              | NOT LB LOGICAL_EXPN1 . RB

    RB   shift, and go to state 114
    AND  shift, and go to state 63
    OR   shift, and go to state 64

    LOGICAL_OPERATOR  go to state 65


State 108

   24 LOGICAL_EXPN: NOT LB LOGICAL_EXPN1 RB .
   28 LOGICAL_EXPN1: NOT LB LOGICAL_EXPN1 RB .

    RB        reduce using rule 24 (LOGICAL_EXPN)
    RB        [reduce using rule 28 (LOGICAL_EXPN1)]
    SC        reduce using rule 24 (LOGICAL_EXPN)
    SC        [reduce using rule 28 (LOGICAL_EXPN1)]
    AND       reduce using rule 28 (LOGICAL_EXPN1)
    OR        reduce using rule 28 (LOGICAL_EXPN1)
    $default  reduce using rule 24 (LOGICAL_EXPN)


State 109

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB . BODY2 RCB COLON LCB BODY2 RCB

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 115
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 110

   18 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB . BODY2 RCB
   19                   | IF LB LOGICAL_EXPN RB LCB . BODY2 RCB ELSE LCB BODY2 RCB

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 116
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 111

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN . SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB
   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN

    SC     shift, and go to state 117
    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73


State 112

   21 PROGRAM_STATEMENTS: DO LCB BODY2 RCB WHILE . LB LOGICAL_EXPN RB SC

    LB  shift, and go to state 118


State 113

   20 PROGRAM_STATEMENTS: WHILE LB LOGICAL_EXPN RB LCB . BODY2 RCB

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 119
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 114

   28 LOGICAL_EXPN1: NOT LB LOGICAL_EXPN1 RB .

    $default  reduce using rule 28 (LOGICAL_EXPN1)


State 115

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB BODY2 . RCB COLON LCB BODY2 RCB

    RCB  shift, and go to state 120


State 116

   18 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB BODY2 . RCB
   19                   | IF LB LOGICAL_EXPN RB LCB BODY2 . RCB ELSE LCB BODY2 RCB

    RCB  shift, and go to state 121


State 117

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC . LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 36

    LOGICAL_EXPN   go to state 122
    LOGICAL_EXPN1  go to state 38
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 118

   21 PROGRAM_STATEMENTS: DO LCB BODY2 RCB WHILE LB . LOGICAL_EXPN RB SC

    LB      shift, and go to state 33
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35
    NOT     shift, and go to state 36

    LOGICAL_EXPN   go to state 123
    LOGICAL_EXPN1  go to state 38
    LOGICAL_EXPN2  go to state 39
    A_EXPN         go to state 40
    A_EXPN1        go to state 41
    A_EXPN2        go to state 42
    A_EXPN3        go to state 43


State 119

   20 PROGRAM_STATEMENTS: WHILE LB LOGICAL_EXPN RB LCB BODY2 . RCB

    RCB  shift, and go to state 124


State 120

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB BODY2 RCB . COLON LCB BODY2 RCB

    COLON  shift, and go to state 125


State 121

   18 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB BODY2 RCB .
   19                   | IF LB LOGICAL_EXPN RB LCB BODY2 RCB . ELSE LCB BODY2 RCB

    ELSE  shift, and go to state 126

    $default  reduce using rule 18 (PROGRAM_STATEMENTS)


State 122

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN . SC A_EXPN RB LCB BODY2 RCB

    SC  shift, and go to state 127


State 123

   21 PROGRAM_STATEMENTS: DO LCB BODY2 RCB WHILE LB LOGICAL_EXPN . RB SC

    RB  shift, and go to state 128


State 124

   20 PROGRAM_STATEMENTS: WHILE LB LOGICAL_EXPN RB LCB BODY2 RCB .

    $default  reduce using rule 20 (PROGRAM_STATEMENTS)


State 125

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB BODY2 RCB COLON . LCB BODY2 RCB

    LCB  shift, and go to state 129


State 126

   19 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB BODY2 RCB ELSE . LCB BODY2 RCB

    LCB  shift, and go to state 130


State 127

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC . A_EXPN RB LCB BODY2 RCB

    LB      shift, and go to state 83
    VAR     shift, and go to state 34
    NUMBER  shift, and go to state 35

    A_EXPN   go to state 131
    A_EXPN1  go to state 41
    A_EXPN2  go to state 42
    A_EXPN3  go to state 43


State 128

   21 PROGRAM_STATEMENTS: DO LCB BODY2 RCB WHILE LB LOGICAL_EXPN RB . SC

    SC  shift, and go to state 132


State 129

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB BODY2 RCB COLON LCB . BODY2 RCB

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 133
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 130

   19 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB BODY2 RCB ELSE LCB . BODY2 RCB

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 134
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 131

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN . RB LCB BODY2 RCB
   43 A_EXPN: A_EXPN . PLUS A_EXPN
   44       | A_EXPN . MINUS A_EXPN

    RB     shift, and go to state 135
    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73


State 132

   21 PROGRAM_STATEMENTS: DO LCB BODY2 RCB WHILE LB LOGICAL_EXPN RB SC .

    $default  reduce using rule 21 (PROGRAM_STATEMENTS)


State 133

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB BODY2 RCB COLON LCB BODY2 . RCB

    RCB  shift, and go to state 136


State 134

   19 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB BODY2 RCB ELSE LCB BODY2 . RCB

    RCB  shift, and go to state 137


State 135

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB . LCB BODY2 RCB

    LCB  shift, and go to state 138


State 136

   17 PROGRAM_STATEMENTS: LB LOGICAL_EXPN RB QMARK LCB BODY2 RCB COLON LCB BODY2 RCB .

    $default  reduce using rule 17 (PROGRAM_STATEMENTS)


State 137

   19 PROGRAM_STATEMENTS: IF LB LOGICAL_EXPN RB LCB BODY2 RCB ELSE LCB BODY2 RCB .

    $default  reduce using rule 19 (PROGRAM_STATEMENTS)


State 138

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB . BODY2 RCB

    LB      shift, and go to state 19
    SC      shift, and go to state 20
    IF      shift, and go to state 21
    FOR     shift, and go to state 22
    DO      shift, and go to state 23
    WHILE   shift, and go to state 24
    VAR     shift, and go to state 25
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 139
    DECLARATION_STATEMENTS  go to state 27
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 28
    PROGRAM_STATEMENT       go to state 29


State 139

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 . RCB

    RCB  shift, and go to state 140


State 140

   22 PROGRAM_STATEMENTS: FOR LB VAR EQ A_EXPN SC LOGICAL_EXPN SC A_EXPN RB LCB BODY2 RCB .

    $default  reduce using rule 22 (PROGRAM_STATEMENTS)
