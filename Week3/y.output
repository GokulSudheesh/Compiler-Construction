Terminals unused in grammar

    NULL_TOK


State 16 conflicts: 4 shift/reduce
State 24 conflicts: 2 shift/reduce
State 79 conflicts: 2 shift/reduce
State 89 conflicts: 1 shift/reduce


Grammar

    0 $accept: prm $end

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB BODY RCB

    2 BODY: DECLARATION_STATEMENTS BODY2

    3 BODY2: %empty
    4      | DECLARATION_STATEMENTS BODY2
    5      | PROGRAM_STATEMENTS BODY2

    6 DECLARATION_STATEMENTS: DECLARATION_STATEMENT DECLARATION_STATEMENTS
    7                       | DECLARATION_STATEMENT

    8 DECLARATION_STATEMENT: DATA_TYPE VAR_LIST SC

    9 VAR_LIST: VAR COMA VAR_LIST
   10         | VAR

   11 MAIN_TYPE: INT

   12 DATA_TYPE: INT
   13          | CHAR
   14          | FLOAT
   15          | DOUBLE

   16 PROGRAM_STATEMENTS: PROGRAM_STATEMENT PROGRAM_STATEMENTS
   17                   | IF LOGICAL_EXPN LCB BODY2 RCB
   18                   | IF LOGICAL_EXPN LCB BODY2 RCB ELSE LCB BODY2 RCB
   19                   | PROGRAM_STATEMENT

   20 LOGICAL_EXPN: LB NOT LB LOGICAL_EXPN1 RB RB
   21             | LB LOGICAL_EXPN1 RB

   22 LOGICAL_EXPN1: LOGICAL_EXPN1 LOGICAL_OPERATOR LOGICAL_EXPN1
   23              | LOGICAL_EXPN2
   24              | NOT LB LOGICAL_EXPN1 RB
   25              | LB LOGICAL_EXPN1 RB

   26 LOGICAL_EXPN2: A_EXPN COMP_OPERATOR A_EXPN

   27 COMP_OPERATOR: ET
   28              | GT
   29              | LT
   30              | GTE
   31              | LTE
   32              | NE

   33 LOGICAL_OPERATOR: AND
   34                 | OR

   35 PROGRAM_STATEMENT: VAR EQ A_EXPN SC

   36 A_EXPN: A_EXPN PLUS A_EXPN
   37       | A_EXPN MINUS A_EXPN
   38       | A_EXPN1

   39 A_EXPN1: A_EXPN1 MUL A_EXPN1
   40        | A_EXPN1 DIV A_EXPN1
   41        | A_EXPN1 MOD A_EXPN1
   42        | A_EXPN2

   43 A_EXPN2: A_EXPN2 EXP A_EXPN2
   44        | A_EXPN3

   45 A_EXPN3: LB A_EXPN RB
   46        | VAR UPLUS
   47        | VAR UMINUS
   48        | VAR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    HEADER (258) 1
    MAIN (259) 1
    LB (260) 1 20 21 24 25 45
    RB (261) 1 20 21 24 25 45
    LCB (262) 1 17 18
    RCB (263) 1 17 18
    SC (264) 8 35
    COMA (265) 9
    NULL_TOK (266)
    IF (267) 17 18
    ELSE (268) 18
    VAR <var_name> (269) 9 10 35 46 47 48
    ET (270) 27
    EQ (271) 35
    GT (272) 28
    LT (273) 29
    GTE (274) 30
    LTE (275) 31
    NE (276) 32
    AND (277) 33
    OR (278) 34
    NOT (279) 20 24
    PLUS (280) 36
    MINUS (281) 37
    MUL (282) 39
    DIV (283) 40
    MOD (284) 41
    EXP (285) 43
    UPLUS (286) 46
    UMINUS (287) 47
    INT <data_type> (288) 11 12
    CHAR <data_type> (289) 13
    FLOAT <data_type> (290) 14
    DOUBLE <data_type> (291) 15


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    prm (38)
        on left: 1
        on right: 0
    BODY (39)
        on left: 2
        on right: 1
    BODY2 (40)
        on left: 3 4 5
        on right: 2 4 5 17 18
    DECLARATION_STATEMENTS (41)
        on left: 6 7
        on right: 2 4 6
    DECLARATION_STATEMENT (42)
        on left: 8
        on right: 6 7
    VAR_LIST (43)
        on left: 9 10
        on right: 8 9
    MAIN_TYPE (44)
        on left: 11
        on right: 1
    DATA_TYPE <data_type> (45)
        on left: 12 13 14 15
        on right: 8
    PROGRAM_STATEMENTS (46)
        on left: 16 17 18 19
        on right: 5 16
    LOGICAL_EXPN (47)
        on left: 20 21
        on right: 17 18
    LOGICAL_EXPN1 (48)
        on left: 22 23 24 25
        on right: 20 21 22 24 25
    LOGICAL_EXPN2 (49)
        on left: 26
        on right: 23
    COMP_OPERATOR (50)
        on left: 27 28 29 30 31 32
        on right: 26
    LOGICAL_OPERATOR (51)
        on left: 33 34
        on right: 22
    PROGRAM_STATEMENT (52)
        on left: 35
        on right: 16 19
    A_EXPN (53)
        on left: 36 37 38
        on right: 26 35 36 37 45
    A_EXPN1 (54)
        on left: 39 40 41 42
        on right: 38 39 40 41
    A_EXPN2 (55)
        on left: 43 44
        on right: 42 43
    A_EXPN3 (56)
        on left: 45 46 47 48
        on right: 44


State 0

    0 $accept: . prm $end

    HEADER  shift, and go to state 1

    prm  go to state 2


State 1

    1 prm: HEADER . MAIN_TYPE MAIN LB RB LCB BODY RCB

    INT  shift, and go to state 3

    MAIN_TYPE  go to state 4


State 2

    0 $accept: prm . $end

    $end  shift, and go to state 5


State 3

   11 MAIN_TYPE: INT .

    $default  reduce using rule 11 (MAIN_TYPE)


State 4

    1 prm: HEADER MAIN_TYPE . MAIN LB RB LCB BODY RCB

    MAIN  shift, and go to state 6


State 5

    0 $accept: prm $end .

    $default  accept


State 6

    1 prm: HEADER MAIN_TYPE MAIN . LB RB LCB BODY RCB

    LB  shift, and go to state 7


State 7

    1 prm: HEADER MAIN_TYPE MAIN LB . RB LCB BODY RCB

    RB  shift, and go to state 8


State 8

    1 prm: HEADER MAIN_TYPE MAIN LB RB . LCB BODY RCB

    LCB  shift, and go to state 9


State 9

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB . BODY RCB

    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    BODY                    go to state 14
    DECLARATION_STATEMENTS  go to state 15
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17


State 10

   12 DATA_TYPE: INT .

    $default  reduce using rule 12 (DATA_TYPE)


State 11

   13 DATA_TYPE: CHAR .

    $default  reduce using rule 13 (DATA_TYPE)


State 12

   14 DATA_TYPE: FLOAT .

    $default  reduce using rule 14 (DATA_TYPE)


State 13

   15 DATA_TYPE: DOUBLE .

    $default  reduce using rule 15 (DATA_TYPE)


State 14

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB BODY . RCB

    RCB  shift, and go to state 18


State 15

    2 BODY: DECLARATION_STATEMENTS . BODY2

    IF      shift, and go to state 19
    VAR     shift, and go to state 20
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 21
    DECLARATION_STATEMENTS  go to state 22
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 23
    PROGRAM_STATEMENT       go to state 24


State 16

    6 DECLARATION_STATEMENTS: DECLARATION_STATEMENT . DECLARATION_STATEMENTS
    7                       | DECLARATION_STATEMENT .

    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    INT       [reduce using rule 7 (DECLARATION_STATEMENTS)]
    CHAR      [reduce using rule 7 (DECLARATION_STATEMENTS)]
    FLOAT     [reduce using rule 7 (DECLARATION_STATEMENTS)]
    DOUBLE    [reduce using rule 7 (DECLARATION_STATEMENTS)]
    $default  reduce using rule 7 (DECLARATION_STATEMENTS)

    DECLARATION_STATEMENTS  go to state 25
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17


State 17

    8 DECLARATION_STATEMENT: DATA_TYPE . VAR_LIST SC

    VAR  shift, and go to state 26

    VAR_LIST  go to state 27


State 18

    1 prm: HEADER MAIN_TYPE MAIN LB RB LCB BODY RCB .

    $default  reduce using rule 1 (prm)


State 19

   17 PROGRAM_STATEMENTS: IF . LOGICAL_EXPN LCB BODY2 RCB
   18                   | IF . LOGICAL_EXPN LCB BODY2 RCB ELSE LCB BODY2 RCB

    LB  shift, and go to state 28

    LOGICAL_EXPN  go to state 29


State 20

   35 PROGRAM_STATEMENT: VAR . EQ A_EXPN SC

    EQ  shift, and go to state 30


State 21

    2 BODY: DECLARATION_STATEMENTS BODY2 .

    $default  reduce using rule 2 (BODY)


State 22

    4 BODY2: DECLARATION_STATEMENTS . BODY2

    IF      shift, and go to state 19
    VAR     shift, and go to state 20
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 31
    DECLARATION_STATEMENTS  go to state 22
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 23
    PROGRAM_STATEMENT       go to state 24


State 23

    5 BODY2: PROGRAM_STATEMENTS . BODY2

    IF      shift, and go to state 19
    VAR     shift, and go to state 20
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 32
    DECLARATION_STATEMENTS  go to state 22
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 23
    PROGRAM_STATEMENT       go to state 24


State 24

   16 PROGRAM_STATEMENTS: PROGRAM_STATEMENT . PROGRAM_STATEMENTS
   19                   | PROGRAM_STATEMENT .

    IF   shift, and go to state 19
    VAR  shift, and go to state 20

    IF        [reduce using rule 19 (PROGRAM_STATEMENTS)]
    VAR       [reduce using rule 19 (PROGRAM_STATEMENTS)]
    $default  reduce using rule 19 (PROGRAM_STATEMENTS)

    PROGRAM_STATEMENTS  go to state 33
    PROGRAM_STATEMENT   go to state 24


State 25

    6 DECLARATION_STATEMENTS: DECLARATION_STATEMENT DECLARATION_STATEMENTS .

    $default  reduce using rule 6 (DECLARATION_STATEMENTS)


State 26

    9 VAR_LIST: VAR . COMA VAR_LIST
   10         | VAR .

    COMA  shift, and go to state 34

    $default  reduce using rule 10 (VAR_LIST)


State 27

    8 DECLARATION_STATEMENT: DATA_TYPE VAR_LIST . SC

    SC  shift, and go to state 35


State 28

   20 LOGICAL_EXPN: LB . NOT LB LOGICAL_EXPN1 RB RB
   21             | LB . LOGICAL_EXPN1 RB

    LB   shift, and go to state 36
    VAR  shift, and go to state 37
    NOT  shift, and go to state 38

    LOGICAL_EXPN1  go to state 39
    LOGICAL_EXPN2  go to state 40
    A_EXPN         go to state 41
    A_EXPN1        go to state 42
    A_EXPN2        go to state 43
    A_EXPN3        go to state 44


State 29

   17 PROGRAM_STATEMENTS: IF LOGICAL_EXPN . LCB BODY2 RCB
   18                   | IF LOGICAL_EXPN . LCB BODY2 RCB ELSE LCB BODY2 RCB

    LCB  shift, and go to state 45


State 30

   35 PROGRAM_STATEMENT: VAR EQ . A_EXPN SC

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN   go to state 47
    A_EXPN1  go to state 42
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 31

    4 BODY2: DECLARATION_STATEMENTS BODY2 .

    $default  reduce using rule 4 (BODY2)


State 32

    5 BODY2: PROGRAM_STATEMENTS BODY2 .

    $default  reduce using rule 5 (BODY2)


State 33

   16 PROGRAM_STATEMENTS: PROGRAM_STATEMENT PROGRAM_STATEMENTS .

    $default  reduce using rule 16 (PROGRAM_STATEMENTS)


State 34

    9 VAR_LIST: VAR COMA . VAR_LIST

    VAR  shift, and go to state 26

    VAR_LIST  go to state 48


State 35

    8 DECLARATION_STATEMENT: DATA_TYPE VAR_LIST SC .

    $default  reduce using rule 8 (DECLARATION_STATEMENT)


State 36

   25 LOGICAL_EXPN1: LB . LOGICAL_EXPN1 RB
   45 A_EXPN3: LB . A_EXPN RB

    LB   shift, and go to state 36
    VAR  shift, and go to state 37
    NOT  shift, and go to state 49

    LOGICAL_EXPN1  go to state 50
    LOGICAL_EXPN2  go to state 40
    A_EXPN         go to state 51
    A_EXPN1        go to state 42
    A_EXPN2        go to state 43
    A_EXPN3        go to state 44


State 37

   46 A_EXPN3: VAR . UPLUS
   47        | VAR . UMINUS
   48        | VAR .

    UPLUS   shift, and go to state 52
    UMINUS  shift, and go to state 53

    $default  reduce using rule 48 (A_EXPN3)


State 38

   20 LOGICAL_EXPN: LB NOT . LB LOGICAL_EXPN1 RB RB
   24 LOGICAL_EXPN1: NOT . LB LOGICAL_EXPN1 RB

    LB  shift, and go to state 54


State 39

   21 LOGICAL_EXPN: LB LOGICAL_EXPN1 . RB
   22 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1

    RB   shift, and go to state 55
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LOGICAL_OPERATOR  go to state 58


State 40

   23 LOGICAL_EXPN1: LOGICAL_EXPN2 .

    $default  reduce using rule 23 (LOGICAL_EXPN1)


State 41

   26 LOGICAL_EXPN2: A_EXPN . COMP_OPERATOR A_EXPN
   36 A_EXPN: A_EXPN . PLUS A_EXPN
   37       | A_EXPN . MINUS A_EXPN

    ET     shift, and go to state 59
    GT     shift, and go to state 60
    LT     shift, and go to state 61
    GTE    shift, and go to state 62
    LTE    shift, and go to state 63
    NE     shift, and go to state 64
    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66

    COMP_OPERATOR  go to state 67


State 42

   38 A_EXPN: A_EXPN1 .
   39 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   40        | A_EXPN1 . DIV A_EXPN1
   41        | A_EXPN1 . MOD A_EXPN1

    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 38 (A_EXPN)


State 43

   42 A_EXPN1: A_EXPN2 .
   43 A_EXPN2: A_EXPN2 . EXP A_EXPN2

    EXP  shift, and go to state 71

    $default  reduce using rule 42 (A_EXPN1)


State 44

   44 A_EXPN2: A_EXPN3 .

    $default  reduce using rule 44 (A_EXPN2)


State 45

   17 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB . BODY2 RCB
   18                   | IF LOGICAL_EXPN LCB . BODY2 RCB ELSE LCB BODY2 RCB

    IF      shift, and go to state 19
    VAR     shift, and go to state 20
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 72
    DECLARATION_STATEMENTS  go to state 22
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 23
    PROGRAM_STATEMENT       go to state 24


State 46

   45 A_EXPN3: LB . A_EXPN RB

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN   go to state 73
    A_EXPN1  go to state 42
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 47

   35 PROGRAM_STATEMENT: VAR EQ A_EXPN . SC
   36 A_EXPN: A_EXPN . PLUS A_EXPN
   37       | A_EXPN . MINUS A_EXPN

    SC     shift, and go to state 74
    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66


State 48

    9 VAR_LIST: VAR COMA VAR_LIST .

    $default  reduce using rule 9 (VAR_LIST)


State 49

   24 LOGICAL_EXPN1: NOT . LB LOGICAL_EXPN1 RB

    LB  shift, and go to state 75


State 50

   22 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   25              | LB LOGICAL_EXPN1 . RB

    RB   shift, and go to state 76
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LOGICAL_OPERATOR  go to state 58


State 51

   26 LOGICAL_EXPN2: A_EXPN . COMP_OPERATOR A_EXPN
   36 A_EXPN: A_EXPN . PLUS A_EXPN
   37       | A_EXPN . MINUS A_EXPN
   45 A_EXPN3: LB A_EXPN . RB

    RB     shift, and go to state 77
    ET     shift, and go to state 59
    GT     shift, and go to state 60
    LT     shift, and go to state 61
    GTE    shift, and go to state 62
    LTE    shift, and go to state 63
    NE     shift, and go to state 64
    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66

    COMP_OPERATOR  go to state 67


State 52

   46 A_EXPN3: VAR UPLUS .

    $default  reduce using rule 46 (A_EXPN3)


State 53

   47 A_EXPN3: VAR UMINUS .

    $default  reduce using rule 47 (A_EXPN3)


State 54

   20 LOGICAL_EXPN: LB NOT LB . LOGICAL_EXPN1 RB RB
   24 LOGICAL_EXPN1: NOT LB . LOGICAL_EXPN1 RB

    LB   shift, and go to state 36
    VAR  shift, and go to state 37
    NOT  shift, and go to state 49

    LOGICAL_EXPN1  go to state 78
    LOGICAL_EXPN2  go to state 40
    A_EXPN         go to state 41
    A_EXPN1        go to state 42
    A_EXPN2        go to state 43
    A_EXPN3        go to state 44


State 55

   21 LOGICAL_EXPN: LB LOGICAL_EXPN1 RB .

    $default  reduce using rule 21 (LOGICAL_EXPN)


State 56

   33 LOGICAL_OPERATOR: AND .

    $default  reduce using rule 33 (LOGICAL_OPERATOR)


State 57

   34 LOGICAL_OPERATOR: OR .

    $default  reduce using rule 34 (LOGICAL_OPERATOR)


State 58

   22 LOGICAL_EXPN1: LOGICAL_EXPN1 LOGICAL_OPERATOR . LOGICAL_EXPN1

    LB   shift, and go to state 36
    VAR  shift, and go to state 37
    NOT  shift, and go to state 49

    LOGICAL_EXPN1  go to state 79
    LOGICAL_EXPN2  go to state 40
    A_EXPN         go to state 41
    A_EXPN1        go to state 42
    A_EXPN2        go to state 43
    A_EXPN3        go to state 44


State 59

   27 COMP_OPERATOR: ET .

    $default  reduce using rule 27 (COMP_OPERATOR)


State 60

   28 COMP_OPERATOR: GT .

    $default  reduce using rule 28 (COMP_OPERATOR)


State 61

   29 COMP_OPERATOR: LT .

    $default  reduce using rule 29 (COMP_OPERATOR)


State 62

   30 COMP_OPERATOR: GTE .

    $default  reduce using rule 30 (COMP_OPERATOR)


State 63

   31 COMP_OPERATOR: LTE .

    $default  reduce using rule 31 (COMP_OPERATOR)


State 64

   32 COMP_OPERATOR: NE .

    $default  reduce using rule 32 (COMP_OPERATOR)


State 65

   36 A_EXPN: A_EXPN PLUS . A_EXPN

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN   go to state 80
    A_EXPN1  go to state 42
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 66

   37 A_EXPN: A_EXPN MINUS . A_EXPN

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN   go to state 81
    A_EXPN1  go to state 42
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 67

   26 LOGICAL_EXPN2: A_EXPN COMP_OPERATOR . A_EXPN

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN   go to state 82
    A_EXPN1  go to state 42
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 68

   39 A_EXPN1: A_EXPN1 MUL . A_EXPN1

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN1  go to state 83
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 69

   40 A_EXPN1: A_EXPN1 DIV . A_EXPN1

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN1  go to state 84
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 70

   41 A_EXPN1: A_EXPN1 MOD . A_EXPN1

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN1  go to state 85
    A_EXPN2  go to state 43
    A_EXPN3  go to state 44


State 71

   43 A_EXPN2: A_EXPN2 EXP . A_EXPN2

    LB   shift, and go to state 46
    VAR  shift, and go to state 37

    A_EXPN2  go to state 86
    A_EXPN3  go to state 44


State 72

   17 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB BODY2 . RCB
   18                   | IF LOGICAL_EXPN LCB BODY2 . RCB ELSE LCB BODY2 RCB

    RCB  shift, and go to state 87


State 73

   36 A_EXPN: A_EXPN . PLUS A_EXPN
   37       | A_EXPN . MINUS A_EXPN
   45 A_EXPN3: LB A_EXPN . RB

    RB     shift, and go to state 77
    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66


State 74

   35 PROGRAM_STATEMENT: VAR EQ A_EXPN SC .

    $default  reduce using rule 35 (PROGRAM_STATEMENT)


State 75

   24 LOGICAL_EXPN1: NOT LB . LOGICAL_EXPN1 RB

    LB   shift, and go to state 36
    VAR  shift, and go to state 37
    NOT  shift, and go to state 49

    LOGICAL_EXPN1  go to state 88
    LOGICAL_EXPN2  go to state 40
    A_EXPN         go to state 41
    A_EXPN1        go to state 42
    A_EXPN2        go to state 43
    A_EXPN3        go to state 44


State 76

   25 LOGICAL_EXPN1: LB LOGICAL_EXPN1 RB .

    $default  reduce using rule 25 (LOGICAL_EXPN1)


State 77

   45 A_EXPN3: LB A_EXPN RB .

    $default  reduce using rule 45 (A_EXPN3)


State 78

   20 LOGICAL_EXPN: LB NOT LB LOGICAL_EXPN1 . RB RB
   22 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   24              | NOT LB LOGICAL_EXPN1 . RB

    RB   shift, and go to state 89
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LOGICAL_OPERATOR  go to state 58


State 79

   22 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   22              | LOGICAL_EXPN1 LOGICAL_OPERATOR LOGICAL_EXPN1 .

    AND  shift, and go to state 56
    OR   shift, and go to state 57

    AND       [reduce using rule 22 (LOGICAL_EXPN1)]
    OR        [reduce using rule 22 (LOGICAL_EXPN1)]
    $default  reduce using rule 22 (LOGICAL_EXPN1)

    LOGICAL_OPERATOR  go to state 58


State 80

   36 A_EXPN: A_EXPN . PLUS A_EXPN
   36       | A_EXPN PLUS A_EXPN .
   37       | A_EXPN . MINUS A_EXPN

    $default  reduce using rule 36 (A_EXPN)


State 81

   36 A_EXPN: A_EXPN . PLUS A_EXPN
   37       | A_EXPN . MINUS A_EXPN
   37       | A_EXPN MINUS A_EXPN .

    $default  reduce using rule 37 (A_EXPN)


State 82

   26 LOGICAL_EXPN2: A_EXPN COMP_OPERATOR A_EXPN .
   36 A_EXPN: A_EXPN . PLUS A_EXPN
   37       | A_EXPN . MINUS A_EXPN

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66

    $default  reduce using rule 26 (LOGICAL_EXPN2)


State 83

   39 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   39        | A_EXPN1 MUL A_EXPN1 .
   40        | A_EXPN1 . DIV A_EXPN1
   41        | A_EXPN1 . MOD A_EXPN1

    $default  reduce using rule 39 (A_EXPN1)


State 84

   39 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   40        | A_EXPN1 . DIV A_EXPN1
   40        | A_EXPN1 DIV A_EXPN1 .
   41        | A_EXPN1 . MOD A_EXPN1

    $default  reduce using rule 40 (A_EXPN1)


State 85

   39 A_EXPN1: A_EXPN1 . MUL A_EXPN1
   40        | A_EXPN1 . DIV A_EXPN1
   41        | A_EXPN1 . MOD A_EXPN1
   41        | A_EXPN1 MOD A_EXPN1 .

    $default  reduce using rule 41 (A_EXPN1)


State 86

   43 A_EXPN2: A_EXPN2 . EXP A_EXPN2
   43        | A_EXPN2 EXP A_EXPN2 .

    EXP  shift, and go to state 71

    $default  reduce using rule 43 (A_EXPN2)


State 87

   17 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB BODY2 RCB .
   18                   | IF LOGICAL_EXPN LCB BODY2 RCB . ELSE LCB BODY2 RCB

    ELSE  shift, and go to state 90

    $default  reduce using rule 17 (PROGRAM_STATEMENTS)


State 88

   22 LOGICAL_EXPN1: LOGICAL_EXPN1 . LOGICAL_OPERATOR LOGICAL_EXPN1
   24              | NOT LB LOGICAL_EXPN1 . RB

    RB   shift, and go to state 91
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LOGICAL_OPERATOR  go to state 58


State 89

   20 LOGICAL_EXPN: LB NOT LB LOGICAL_EXPN1 RB . RB
   24 LOGICAL_EXPN1: NOT LB LOGICAL_EXPN1 RB .

    RB  shift, and go to state 92

    RB        [reduce using rule 24 (LOGICAL_EXPN1)]
    $default  reduce using rule 24 (LOGICAL_EXPN1)


State 90

   18 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB BODY2 RCB ELSE . LCB BODY2 RCB

    LCB  shift, and go to state 93


State 91

   24 LOGICAL_EXPN1: NOT LB LOGICAL_EXPN1 RB .

    $default  reduce using rule 24 (LOGICAL_EXPN1)


State 92

   20 LOGICAL_EXPN: LB NOT LB LOGICAL_EXPN1 RB RB .

    $default  reduce using rule 20 (LOGICAL_EXPN)


State 93

   18 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB BODY2 RCB ELSE LCB . BODY2 RCB

    IF      shift, and go to state 19
    VAR     shift, and go to state 20
    INT     shift, and go to state 10
    CHAR    shift, and go to state 11
    FLOAT   shift, and go to state 12
    DOUBLE  shift, and go to state 13

    $default  reduce using rule 3 (BODY2)

    BODY2                   go to state 94
    DECLARATION_STATEMENTS  go to state 22
    DECLARATION_STATEMENT   go to state 16
    DATA_TYPE               go to state 17
    PROGRAM_STATEMENTS      go to state 23
    PROGRAM_STATEMENT       go to state 24


State 94

   18 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB BODY2 RCB ELSE LCB BODY2 . RCB

    RCB  shift, and go to state 95


State 95

   18 PROGRAM_STATEMENTS: IF LOGICAL_EXPN LCB BODY2 RCB ELSE LCB BODY2 RCB .

    $default  reduce using rule 18 (PROGRAM_STATEMENTS)
